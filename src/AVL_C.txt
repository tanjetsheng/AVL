#include "addnode.h"
#include "stdio.h"
#include "stdlib.h"
#include "rotate.h"
#include "Node.h"
#include "avlint.h"

/*function that use to add node that can use for universal data
by implementing different type of compare function
*/


int addNode(Node **nodePtr,Node *newNode,Compare IntegerCompare){
  int height;     //it return height to let use determine height change
  if(*nodePtr == NULL){
    *nodePtr = newNode;
    (*nodePtr)->left =NULL;
    (*nodePtr)->right =NULL;
    height =1;
    return height;
   }
  else{
    int Result = IntegerCompare((void *)newNode->data,*nodePtr);
    if (Result == 1)      //if smaller it go left
     {
     height = addNode(&(*nodePtr)->left,newNode,IntegerCompare);
       if(height==1){       //there are height change
       (*nodePtr)->balanceFactor -= 1;
         if((*nodePtr)->balanceFactor==0)
         height=0;
       }
     else
     (*nodePtr)->balanceFactor =(*nodePtr)->balanceFactor;

     }
     else if (Result ==-1)      //larger go left
     {
     height = addNode(&(*nodePtr)->right,newNode,IntegerCompare);
       if(height==1){
       (*nodePtr)->balanceFactor += 1;
         if((*nodePtr)->balanceFactor==0)
           height=0;;
         }
       else
         (*nodePtr)->balanceFactor =(*nodePtr)->balanceFactor;
     }
   }
   if((*nodePtr)->balanceFactor >= 2)       //rotate function
       avlBalanceRightTree(&(*nodePtr));
   else if((*nodePtr)->balanceFactor <= -2)
       avlBalanceLeftTree(&(*nodePtr));
   else{
      *nodePtr = *nodePtr;
     }
       return height;
}
#include "addnode.h"
#include "stdio.h"
#include "stdlib.h"
#include "rotate.h"
#include "Node.h"
#include "avlint.h"

/*function that use to add node that can use for universal data
by implementing different type of compare function
*/


int addNode(Node **nodePtr,Node *newNode,Compare IntegerCompare){
  int height;     //it return height to let use determine height change
  if(*nodePtr == NULL){
    *nodePtr = newNode;
    (*nodePtr)->left =NULL;
    (*nodePtr)->right =NULL;
    height =1;
    return height;
   }
  else{
    int Result = IntegerCompare((void *)newNode->data,*nodePtr);
    if (Result == 1)      //if smaller it go left
     {
     height = addNode(&(*nodePtr)->left,newNode,IntegerCompare);
       if(height==1){       //there are height change
       (*nodePtr)->balanceFactor -= 1;
         if((*nodePtr)->balanceFactor==0)
         height=0;
       }
     else
     (*nodePtr)->balanceFactor =(*nodePtr)->balanceFactor;

     }
     else if (Result ==-1)      //larger go left
     {
     height = addNode(&(*nodePtr)->right,newNode,IntegerCompare);
       if(height==1){
       (*nodePtr)->balanceFactor += 1;
         if((*nodePtr)->balanceFactor==0)
           height=0;;
         }
       else
         (*nodePtr)->balanceFactor =(*nodePtr)->balanceFactor;
     }
   }
   if((*nodePtr)->balanceFactor >= 2)       //rotate function
       avlBalanceRightTree(&(*nodePtr));
   else if((*nodePtr)->balanceFactor <= -2)
       avlBalanceLeftTree(&(*nodePtr));
   else{
      *nodePtr = *nodePtr;
     }
       return height;
}
#include "avlint.h"

int IntegerCompare(int data, Node *refNode)       //compare function for int
{

  if (data < refNode->data)
  {
    return 1;
  }
  else if(data > refNode->data)
  {
    return -1;
  }
  else
    return 0;
}

int StringCompare(char *data,StringNode *refNode){    //compare function for
  int result = strcmp(data,refNode->data);            //string
  if(result>0)
  return 1;
  else if(result<0)
  return -1;
  else
  return 0;
}
#include "noderemove.h"
#include "stdio.h"
#include "stdlib.h"
#include "rotate.h"
#include "addnode.h"
#include "avlint.h"


Node *getValue(Node **nodePtr,int *height)        //get the value from the most
{                                                 //bottom and chack for the
  Node *temp;                                     //height change and perform
  Node *child = (*nodePtr)->left;                   //height change

  if(child != NULL)
  {
    if(child->left != NULL)
      getValue(&(*nodePtr)->left,height);
      else
      {
        if(child->right != NULL)
        {
          (*nodePtr)->left = child->right;
          (*nodePtr)->balanceFactor++;
          child->right = NULL;
          if((*nodePtr)->balanceFactor !=0)
          *height = 0;
          else
          *height = 1;
        }
        else
        {
          (*nodePtr)->left = NULL;
          (*nodePtr)->balanceFactor++;

          if((*nodePtr)->balanceFactor >= 2)
            avlBalanceRightTree(&(*nodePtr));
          else if((*nodePtr)->balanceFactor <= -2)
            avlBalanceLeftTree(&(*nodePtr));
          else{
            *nodePtr = *nodePtr;
          }
          if((*nodePtr)->balanceFactor !=0)
          *height = 0;
          else
          *height = 1;
        }
        return child;
      }
    }
  else
    {
      temp = *nodePtr;
      *height = 1;
      *nodePtr = NULL;
      return temp;
    }
}


Node *avl_Remove(Node **nodePtr, int nodeToRemove, int *height,Compare IntegerCompare)
{
  if((*nodePtr) == NULL){
    return *nodePtr;
  }
  int Result = IntegerCompare(nodeToRemove,*nodePtr);
      if(Result > 0)
      {
        avl_Remove(&((*nodePtr)->left),nodeToRemove,height,IntegerCompare);
        if(*height == 1){
          (*nodePtr)->balanceFactor++;
        }
        else
        (*nodePtr)->balanceFactor = (*nodePtr)->balanceFactor;
      }
      else if(Result < 0)
      {
        avl_Remove(&((*nodePtr)->right),nodeToRemove,height,IntegerCompare);
        if(*height == 1)
        {
          (*nodePtr)->balanceFactor--;
        }
        else
        (*nodePtr)->balanceFactor = (*nodePtr)->balanceFactor;
      }
      else
      {
            if(((*nodePtr)->left == NULL)||((*nodePtr)->right == NULL))
            {
              Node *Remove = (*nodePtr)->left ? (*nodePtr)->left :(*nodePtr)->right;
                if(Remove == NULL)
                {
                  Remove = *nodePtr;
                  *nodePtr = NULL;
                  *height = 1;
                }
                else
                {
                  *nodePtr =  Remove;
                }
              }
            else
            {
              Node *temp = getValue(&(*nodePtr)->right,height);
              if(*height == 1)
              {
                (*nodePtr)->balanceFactor--;
                if((*nodePtr)->balanceFactor !=0)
                *height = 0;
                else
                *height = 1;
              }
              else
              (*nodePtr)->balanceFactor = (*nodePtr)->balanceFactor;
                if(temp->right != NULL)
                {
                    temp->left = (*nodePtr)->left;
                    temp->balanceFactor = (*nodePtr)->balanceFactor;
                    *nodePtr = temp;
                }
                else
                {
                  temp->right = (*nodePtr)->right;
                  temp->left = (*nodePtr)->left;
                  temp->balanceFactor = (*nodePtr)->balanceFactor;
                  *nodePtr = temp;
                }
            }
          }
    if((*nodePtr)==NULL)
    {
      return *nodePtr;
    }
    if((*nodePtr)->balanceFactor >= 2)
      avlBalanceRightTree(&(*nodePtr));
    else if((*nodePtr)->balanceFactor <= -2)
      avlBalanceLeftTree(&(*nodePtr));
    else
    {
      *nodePtr = *nodePtr;
    }
    if((*nodePtr)->balanceFactor !=0)
    *height = 0;
    else
    *height = 1;
    return *nodePtr;
}

Node *RemoveNode(Node **nodePtr, int nodeToRemove,Compare IntCompare)
{
  int height;
  Node *RemoveNode = avl_Remove(nodePtr,nodeToRemove, &height,IntCompare);
  return RemoveNode;
}
#include "nodeverifier.h"
#include "node.h"
#include "unity.h"
#include <stdarg.h>
#include <stdio.h>
#include <malloc.h>


char *createMessage(char *message, ...){
  va_list args;
  char *buffer;
  int length;

  va_start(args,message);

  length = vsnprintf(buffer, 0, message, args);
  buffer = malloc(length+1);
  vsnprintf(buffer, length+1, message, args);

  return buffer;
}

void testAssertEqualNode(Node *left, Node *right, int balanceFactor, Node *node,int lineNo){
  char *error;
  if(left != node->left){
      error = createMessage("Expected left node to be 0x%p, but was %p",  \
                            left,node->left);
      UNITY_TEST_FAIL(lineNo,error);
    }
  else if(balanceFactor != node->balanceFactor){
    error = createMessage("Expected balance factor to be 0x%d, but was %d",  \
                          balanceFactor,node->balanceFactor);
    UNITY_TEST_FAIL(lineNo,error);
  }


  else if(right != node->right){
      error = createMessage("Expected right node to be 0x%p, but was %p",  \
                            right,node->right);
    UNITY_TEST_FAIL(lineNo,error);
    }


}
#include "rotate.h"
#include <stdio.h>
#include "Node.h"



/*      before                   |  action |          after
*   Node  |  childNode |  grand  |         | Node  |  childNode |  grand
*     +2  |     +1     |    x    |  L      |  0    |    0       |    x
*     +2  |     0      |    x    |  L      |  1    |   -1       |    x
*     +2  |     -1     |    -1   |  RL     |  0    |    1       |    0
*     +2  |     -1     |    0    |  RL     |  0    |    0       |    0
*     +2  |     -1     |    +1   |  RL     |  -1   |    0       |    0
*     -2  |     -1     |    x    |  R      |  0    |    0       |    X
*     -2  |     0      |    x    |  R      |  -1   |    1       |    X
*     -2  |     +1     |    +1   |  LR     |  0    |    -1      |    0
*     -2  |     +1     |    0    |  LR     |  0    |    0       |    0
*     -2  |     +1     |    -1   |  LR     |  1    |    0       |    0

*/
Node *root;
Node *rotateRight(Node *node){
  root = node->left;
  node->left = node->left->right;
  root ->right = node;
  return root;
}

Node *rotateLeft(Node *node){
//  Node *root;

  root = node->right;
  node->right = root->left;
  root->left = node;
  return root;
}

Node *rotateLeftRight(Node *node){
//  Node *root;
  Node *grandChild = node->left->right;
  node->left = rotateLeft(node->left);
  root = rotateRight(node);
  return root;
}

Node *rotateRightLeft(Node *node){
  //Node *root;
  node->right = rotateRight(node->right);
  root = rotateLeft(node);
  return root;
}

int avlBalanceLeftTree(Node **rootPtr){
  int bf;
  Node *node = *rootPtr;
  Node *child = node->left;
  Node *grandchild = node->left->right;
  if((bf = child->balanceFactor)==1){
    if((bf = grandchild->balanceFactor)==1){
      node->balanceFactor = 0;
      child->balanceFactor = -1;
      grandchild->balanceFactor = 0;
                                            }
    else if((bf = grandchild->balanceFactor)==0){
      node->balanceFactor = 0;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                }
    else if((bf = grandchild->balanceFactor)==-1){
      node->balanceFactor = 1;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                  }
     *rootPtr = rotateLeftRight(*rootPtr);
      return 0;
                                     }
  else if((bf = child->balanceFactor)==0){
    node->balanceFactor = -1;
    child->balanceFactor = 1;
                                          }
  else if((bf = child->balanceFactor)==-1){
    node->balanceFactor = 0;
    child->balanceFactor = 0;
  }
    *rootPtr = rotateRight(*rootPtr);
     return 0;
}

int avlBalanceRightTree(Node **rootPtr){
  int bf;
  Node *node = *rootPtr;
  Node *child = node->right;
  Node *grandchild = node->right->left;
  if((bf = child->balanceFactor)==-1){
    if((bf = grandchild->balanceFactor)==-1){
      node->balanceFactor = 0;
      child->balanceFactor = 1;
      grandchild->balanceFactor = 0;
                                            }
    else if((bf = grandchild->balanceFactor)==0){
      node->balanceFactor = 0;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                }
    else if((bf = grandchild->balanceFactor)==1){
      node->balanceFactor = -1;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                }
      *rootPtr = rotateRightLeft(*rootPtr);
       return 0;
                                    }

  else if((bf = child->balanceFactor)==0){
    node->balanceFactor = 1;
    child->balanceFactor -= 1;
                                          }
  else if((bf = child->balanceFactor)==1){
    node->balanceFactor = 0;
    child->balanceFactor = 0;
                                          }
    *rootPtr = rotateLeft(*rootPtr);
     return 0;
}
#include "avlint.h"

int IntegerCompare(int data, Node *refNode)       //compare function for int
{

  if (data < refNode->data)
  {
    return 1;
  }
  else if(data > refNode->data)
  {
    return -1;
  }
  else
    return 0;
}

int StringCompare(char *data,StringNode *refNode){    //compare function for
  int result = strcmp(data,refNode->data);            //string
  if(result>0)
  return 1;
  else if(result<0)
  return -1;
  else
  return 0;
}
#include "noderemove.h"
#include "stdio.h"
#include "stdlib.h"
#include "rotate.h"
#include "addnode.h"
#include "avlint.h"


Node *getValue(Node **nodePtr,int *height)        //get the value from the most
{                                                 //bottom and chack for the
  Node *temp;                                     //height change and perform
  Node *child = (*nodePtr)->left;                   //height change

  if(child != NULL)
  {
    if(child->left != NULL)
      getValue(&(*nodePtr)->left,height);
      else
      {
        if(child->right != NULL)
        {
          (*nodePtr)->left = child->right;
          (*nodePtr)->balanceFactor++;
          child->right = NULL;
          if((*nodePtr)->balanceFactor !=0)
          *height = 0;
          else
          *height = 1;
        }
        else
        {
          (*nodePtr)->left = NULL;
          (*nodePtr)->balanceFactor++;

          if((*nodePtr)->balanceFactor >= 2)
            avlBalanceRightTree(&(*nodePtr));
          else if((*nodePtr)->balanceFactor <= -2)
            avlBalanceLeftTree(&(*nodePtr));
          else{
            *nodePtr = *nodePtr;
          }
          if((*nodePtr)->balanceFactor !=0)
          *height = 0;
          else
          *height = 1;
        }
        return child;
      }
    }
  else
    {
      temp = *nodePtr;
      *height = 1;
      *nodePtr = NULL;
      return temp;
    }
}


Node *avl_Remove(Node **nodePtr, int nodeToRemove, int *height,Compare IntegerCompare)
{
  if((*nodePtr) == NULL){
    return *nodePtr;
  }
  int Result = IntegerCompare(nodeToRemove,*nodePtr);
      if(Result > 0)
      {
        avl_Remove(&((*nodePtr)->left),nodeToRemove,height,IntegerCompare);
        if(*height == 1){
          (*nodePtr)->balanceFactor++;
        }
        else
        (*nodePtr)->balanceFactor = (*nodePtr)->balanceFactor;
      }
      else if(Result < 0)
      {
        avl_Remove(&((*nodePtr)->right),nodeToRemove,height,IntegerCompare);
        if(*height == 1)
        {
          (*nodePtr)->balanceFactor--;
        }
        else
        (*nodePtr)->balanceFactor = (*nodePtr)->balanceFactor;
      }
      else
      {
            if(((*nodePtr)->left == NULL)||((*nodePtr)->right == NULL))
            {
              Node *Remove = (*nodePtr)->left ? (*nodePtr)->left :(*nodePtr)->right;
                if(Remove == NULL)
                {
                  Remove = *nodePtr;
                  *nodePtr = NULL;
                  *height = 1;
                }
                else
                {
                  *nodePtr =  Remove;
                }
              }
            else
            {
              Node *temp = getValue(&(*nodePtr)->right,height);
              if(*height == 1)
              {
                (*nodePtr)->balanceFactor--;
                if((*nodePtr)->balanceFactor !=0)
                *height = 0;
                else
                *height = 1;
              }
              else
              (*nodePtr)->balanceFactor = (*nodePtr)->balanceFactor;
                if(temp->right != NULL)
                {
                    temp->left = (*nodePtr)->left;
                    temp->balanceFactor = (*nodePtr)->balanceFactor;
                    *nodePtr = temp;
                }
                else
                {
                  temp->right = (*nodePtr)->right;
                  temp->left = (*nodePtr)->left;
                  temp->balanceFactor = (*nodePtr)->balanceFactor;
                  *nodePtr = temp;
                }
            }
          }
    if((*nodePtr)==NULL)
    {
      return *nodePtr;
    }
    if((*nodePtr)->balanceFactor >= 2)
      avlBalanceRightTree(&(*nodePtr));
    else if((*nodePtr)->balanceFactor <= -2)
      avlBalanceLeftTree(&(*nodePtr));
    else
    {
      *nodePtr = *nodePtr;
    }
    if((*nodePtr)->balanceFactor !=0)
    *height = 0;
    else
    *height = 1;
    return *nodePtr;
}

Node *RemoveNode(Node **nodePtr, int nodeToRemove,Compare IntCompare)
{
  int height;
  Node *RemoveNode = avl_Remove(nodePtr,nodeToRemove, &height,IntCompare);
  return RemoveNode;
}
#include "nodeverifier.h"
#include "node.h"
#include "unity.h"
#include <stdarg.h>
#include <stdio.h>
#include <malloc.h>


char *createMessage(char *message, ...){
  va_list args;
  char *buffer;
  int length;

  va_start(args,message);

  length = vsnprintf(buffer, 0, message, args);
  buffer = malloc(length+1);
  vsnprintf(buffer, length+1, message, args);

  return buffer;
}

void testAssertEqualNode(Node *left, Node *right, int balanceFactor, Node *node,int lineNo){
  char *error;
  if(left != node->left){
      error = createMessage("Expected left node to be 0x%p, but was %p",  \
                            left,node->left);
      UNITY_TEST_FAIL(lineNo,error);
    }
  else if(balanceFactor != node->balanceFactor){
    error = createMessage("Expected balance factor to be 0x%d, but was %d",  \
                          balanceFactor,node->balanceFactor);
    UNITY_TEST_FAIL(lineNo,error);
  }


  else if(right != node->right){
      error = createMessage("Expected right node to be 0x%p, but was %p",  \
                            right,node->right);
    UNITY_TEST_FAIL(lineNo,error);
    }


}
#include "rotate.h"
#include <stdio.h>
#include "Node.h"



/*      before                   |  action |          after
*   Node  |  childNode |  grand  |         | Node  |  childNode |  grand
*     +2  |     +1     |    x    |  L      |  0    |    0       |    x
*     +2  |     0      |    x    |  L      |  1    |   -1       |    x
*     +2  |     -1     |    -1   |  RL     |  0    |    1       |    0
*     +2  |     -1     |    0    |  RL     |  0    |    0       |    0
*     +2  |     -1     |    +1   |  RL     |  -1   |    0       |    0
*     -2  |     -1     |    x    |  R      |  0    |    0       |    X
*     -2  |     0      |    x    |  R      |  -1   |    1       |    X
*     -2  |     +1     |    +1   |  LR     |  0    |    -1      |    0
*     -2  |     +1     |    0    |  LR     |  0    |    0       |    0
*     -2  |     +1     |    -1   |  LR     |  1    |    0       |    0

*/
Node *root;
Node *rotateRight(Node *node){
  root = node->left;
  node->left = node->left->right;
  root ->right = node;
  return root;
}

Node *rotateLeft(Node *node){
//  Node *root;

  root = node->right;
  node->right = root->left;
  root->left = node;
  return root;
}

Node *rotateLeftRight(Node *node){
//  Node *root;
  Node *grandChild = node->left->right;
  node->left = rotateLeft(node->left);
  root = rotateRight(node);
  return root;
}

Node *rotateRightLeft(Node *node){
  //Node *root;
  node->right = rotateRight(node->right);
  root = rotateLeft(node);
  return root;
}

int avlBalanceLeftTree(Node **rootPtr){
  int bf;
  Node *node = *rootPtr;
  Node *child = node->left;
  Node *grandchild = node->left->right;
  if((bf = child->balanceFactor)==1){
    if((bf = grandchild->balanceFactor)==1){
      node->balanceFactor = 0;
      child->balanceFactor = -1;
      grandchild->balanceFactor = 0;
                                            }
    else if((bf = grandchild->balanceFactor)==0){
      node->balanceFactor = 0;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                }
    else if((bf = grandchild->balanceFactor)==-1){
      node->balanceFactor = 1;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                  }
     *rootPtr = rotateLeftRight(*rootPtr);
      return 0;
                                     }
  else if((bf = child->balanceFactor)==0){
    node->balanceFactor = -1;
    child->balanceFactor = 1;
                                          }
  else if((bf = child->balanceFactor)==-1){
    node->balanceFactor = 0;
    child->balanceFactor = 0;
  }
    *rootPtr = rotateRight(*rootPtr);
     return 0;
}

int avlBalanceRightTree(Node **rootPtr){
  int bf;
  Node *node = *rootPtr;
  Node *child = node->right;
  Node *grandchild = node->right->left;
  if((bf = child->balanceFactor)==-1){
    if((bf = grandchild->balanceFactor)==-1){
      node->balanceFactor = 0;
      child->balanceFactor = 1;
      grandchild->balanceFactor = 0;
                                            }
    else if((bf = grandchild->balanceFactor)==0){
      node->balanceFactor = 0;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                }
    else if((bf = grandchild->balanceFactor)==1){
      node->balanceFactor = -1;
      child->balanceFactor = 0;
      grandchild->balanceFactor = 0;
                                                }
      *rootPtr = rotateRightLeft(*rootPtr);
       return 0;
                                    }

  else if((bf = child->balanceFactor)==0){
    node->balanceFactor = 1;
    child->balanceFactor -= 1;
                                          }
  else if((bf = child->balanceFactor)==1){
    node->balanceFactor = 0;
    child->balanceFactor = 0;
                                          }
    *rootPtr = rotateLeft(*rootPtr);
     return 0;
}
